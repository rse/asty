{"version":3,"file":"bundle.js","sources":["node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/asty-base.js","src/asty-walk.js","src/asty-merge.js","src/asty-dump.js","src/asty.js"],"names":["ASTYBase","init","T","A","C","Error","this","ASTy","L","O","P","name","hasOwnProperty","set","Array","add","type","arguments","length","pos","args","_arguments","Object","keys","forEach","key","_this","get","attrs","_add","node","child","JSON","stringify","push","prototype","slice","call","arg","_this2","del","found","j","_this3","splice","childs","parent","module","exports","ASTYWalk","walk","cb","when","_walk","depth","ASTYMerge","merge","takePos","attrMap","attrSource","attrTarget","ASTYDump","dump","maxDepth","undefined","Infinity","out","i","first","value","replace","RegExp","toString","require","ASTYCtx","ASTYNode","mixins","mixin","method","extend","create","isA"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYBase {\n    /*  AST node initialization  */\n    init (T, A, C) {\n        if (typeof T === \"undefined\")\n            throw new Error(\"init: invalid argument\")\n        this.ASTy = true\n        this.T = T\n        this.L = { L: 0, C: 0, O: 0 }\n        this.A = {}\n        this.C = []\n        this.P = null\n        if (typeof A === \"object\") {\n            for (let name in A)\n                if (A.hasOwnProperty(name))\n                    this.set(name, A[name])\n        }\n        if (typeof C === \"object\" && C instanceof Array)\n            this.add(C)\n        return this\n    }\n\n    /*  check the type of an AST node  */\n    type (T) {\n        if (arguments.length === 0)\n            return this.T\n        else if (arguments.length === 1) {\n            this.T = T\n            return this\n        }\n        else\n            throw new Error(\"type: invalid number of arguments\")\n    }\n\n    /*  set the parsing position   */\n    pos (L, C, O) {\n        if (arguments.length === 0)\n            return this.L\n        else if (arguments.length <= 3) {\n            this.L.L = L || 0\n            this.L.C = C || 0\n            this.L.O = O || 0\n            return this\n        }\n        else\n            throw new Error(\"pos: invalid number of arguments\")\n    }\n\n    /*  set AST node attributes  */\n    set () {\n        if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n            let args = arguments\n            Object.keys(args[0]).forEach((key) => {\n                this.A[key] = args[0][key]\n            })\n        }\n        else if (arguments.length === 2)\n            this.A[arguments[0]] = arguments[1]\n        else\n            throw new Error(\"set: invalid arguments\")\n        return this\n    }\n\n    /*  get AST node attributes  */\n    get (key) {\n        if (arguments.length !== 1)\n            throw new Error(\"get: invalid number of arguments\")\n        if (typeof key !== \"string\")\n            throw new Error(\"get: invalid argument\")\n        return this.A[key]\n    }\n\n    /*  get names of all AST node attributes  */\n    attrs () {\n        return Object.keys(this.A)\n    }\n\n    /*  add child AST node(s)  */\n    add () {\n        if (arguments.length === 0)\n            throw new Error(\"add: missing argument(s)\")\n        let _add = (node, child) => {\n            if (!((typeof child   === \"object\") &&\n                  (typeof child.T === \"string\") &&\n                  (typeof child.L === \"object\") &&\n                  (typeof child.A === \"object\") &&\n                  (typeof child.P === \"object\") &&\n                  (typeof child.C === \"object\" && child.C instanceof Array)))\n                throw new Error(\"add: invalid AST node: \" + JSON.stringify(child))\n            node.C.push(child)\n            child.P = node\n        }\n        if (arguments !== null) {\n            Array.prototype.slice.call(arguments, 0).forEach((arg) => {\n                if (typeof arg === \"object\" && arg instanceof Array)\n                    arg.forEach((child) => { _add(this, child) })\n                else if (arg !== null)\n                    _add(this, arg)\n            })\n        }\n        return this\n    }\n\n    /*  delete child AST node(s)  */\n    del () {\n        if (arguments.length === 0)\n            throw new Error(\"del: invalid argument\")\n        Array.prototype.slice.call(arguments, 0).forEach((arg) => {\n            let found = false\n            for (let j = 0; j < this.C.length; j++) {\n                if (this.C[j] === arg) {\n                    this.C.splice(j, 1)\n                    arg.P = null\n                    found = true\n                    break\n                }\n            }\n            if (!found)\n                throw new Error(\"del: child not found\")\n        })\n        return this\n    }\n\n    /*  get child AST nodes  */\n    childs () {\n        return this.C\n    }\n\n    /*  get parent AST node  */\n    parent () {\n        return this.P\n    }\n}\n\nmodule.exports = ASTYBase\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYWalk {\n    /*  walk the AST recursively  */\n    walk (cb, when) {\n        if (typeof when === \"undefined\")\n            when = \"downward\"\n        let _walk = (node, depth, parent) => {\n            if (when === \"downward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"downward\")\n            node.C.forEach((child) => {\n                _walk(child, depth + 1, node)\n            })\n            if (when === \"upward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"upward\")\n        }\n        _walk(this, 0, null)\n        return this\n    }\n}\n\nmodule.exports = ASTYWalk\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYMerge {\n    /*  merge attributes and childs of an AST node  */\n    merge (node, takePos, attrMap) {\n        if (typeof node !== \"object\")\n            throw new Error(\"merge: invalid AST node argument\")\n        if (typeof takePos === \"undefined\")\n            takePos = false\n        if (typeof attrMap === \"undefined\")\n            attrMap = {}\n        if (takePos) {\n            let pos = node.pos()\n            this.pos(pos.L, pos.C, pos.O)\n        }\n        node.attrs().forEach((attrSource) => {\n            let attrTarget = (\n                  typeof attrMap[attrSource] !== \"undefined\"\n                ? attrMap[attrSource]\n                : attrSource\n            )\n            if (attrTarget !== null)\n                this.set(attrTarget, node.get(attrSource))\n        })\n        node.childs().forEach((child) => {\n            this.add(child)\n        })\n        return this\n    }\n}\n\nmodule.exports = ASTYMerge\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYDump {\n    /*  dump the AST recursively  */\n    dump (maxDepth) {\n        if (maxDepth === undefined)\n            maxDepth = Infinity\n        let out = \"\"\n        this.walk((node, depth /*, parent, when */) => {\n            if (depth > maxDepth)\n                return\n            for (let i = 0; i < depth; i++)\n                out += \"    \"\n            out += node.T + \" \"\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                out += \"(\"\n                let first = true\n                keys.forEach((key) => {\n                    if (!first)\n                        out += \", \"\n                    else\n                        first = false\n                    out += key + \": \"\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"string\":\n                            out += \"\\\"\" + value.replace(/\\n/, \"\\\\n\").replace(/\"/, \"\\\\\\\"\") + \"\\\"\"\n                            break\n                        case \"object\":\n                            if (value instanceof RegExp)\n                                out += \"/\" +\n                                    value.toString()\n                                    .replace(/^\\//, \"\")\n                                    .replace(/\\/$/, \"\")\n                                    .replace(/\\//g, \"\\\\/\") +\n                                \"/\"\n                            else\n                                out += JSON.stringify(value)\n                            break\n                        default:\n                            out += JSON.stringify(value)\n                            break\n                    }\n                })\n                out += \") \"\n            }\n            out += \"[\" + node.L.L + \"/\" + node.L.C + \"]\\n\"\n        }, \"downward\")\n        return out\n    }\n}\n\nmodule.exports = ASTYDump\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nlet ASTYBase  = require(\"./asty-base.js\");\nlet ASTYMerge = require(\"./asty-merge.js\");\nlet ASTYWalk  = require(\"./asty-walk.js\");\nlet ASTYDump  = require(\"./asty-dump.js\");\n\nlet ASTYCtx = class ASTYCtx {\n    constructor () {\n        if (!(this instanceof ASTYCtx))\n            return new ASTYCtx()\n        this.ASTYNode = () => {}\n        let mixins = [ ASTYBase, ASTYMerge, ASTYWalk, ASTYDump ]\n        mixins.forEach((mixin) => {\n            for (let method in mixin.prototype)\n                if (mixin.prototype.hasOwnProperty(method))\n                    this.ASTYNode.prototype[method] = mixin.prototype[method]\n        })\n        return this\n    }\n    extend (mixin) {\n        for (let method in mixin)\n            if (mixin.hasOwnProperty(method))\n                this.ASTYNode.prototype[method] = mixin[method]\n        return this\n    }\n    create (type) {\n        return (new this.ASTYNode()).init(type)\n    }\n    isA (node) {\n        return (\n               typeof node === \"object\"\n            && node instanceof this.ASTYNode\n            && typeof node.ASTy === \"boolean\"\n            && node.ASTy === true\n        )\n    }\n}\n\nmodule.exports = ASTYCtx\n\n"]}