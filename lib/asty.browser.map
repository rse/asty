{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/asty-base.js","src/asty-dump.js","src/asty-merge.js","src/asty-serialize.js","src/asty-version.js","src/asty-walk.js","src/asty.js"],"names":["ASTYBase","ctx","T","A","C","arguments","length","Error","this","ASTy","L","O","P","_typeof","name","hasOwnProperty","set","Array","add","line","column","offset","_this","_len","args","_key","Object","keys","forEach","key","_this2","_len2","_key2","idx","indexOf","pos","_this3","_len3","_key3","_ins","node","isA","splice","arg","_this4","_len4","_key4","_add","push","_this5","_len5","_key5","found","j","undefined","slice","serialize","tree","mid","unicode","String","fromCharCode","ascii","last","down","left","ASTYDump","maxDepth","Infinity","colorize","type","txt","out","walk","depth","nodeIndex","nth","max","_nodeIndex","prefix","parent","_nodeIndex2","first","value","toString","hex","ch","charCodeAt","toUpperCase","replace","RegExp","source","JSON","stringify","ASTYMerge","takePos","attrMap","attrs","attrSource","attrTarget","get","childs","child","ASTYSerialize","asty","serializeNode","clone","parse","map","json","obj","unserializeNode","create","version","major","minor","micro","date","ASTYWalk","cb","when","_walk","call","_astyBase","require","_astyMerge","_astyWalk","_astyDump","_astySerialize","_astyVersion","ASTYCtx","_classCallCheck","ASTYNode","_astyBase2","default","_astyMerge2","_astyWalk2","_astyDump2","mixin","proto","prototype","method","_astyVersion2","init","_astySerialize2","unserialize","module","exports"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYBase {\n    /*  AST node initialization  */\n    init (ctx, T, A, C) {\n        if (arguments.length < 2)\n            throw new Error(\"init: invalid number of arguments\")\n        this.ctx = ctx\n        this.ASTy = true\n        this.T = T\n        this.L = { L: 0, C: 0, O: 0 }\n        this.A = {}\n        this.C = []\n        this.P = null\n        if (typeof A === \"object\") {\n            for (let name in A)\n                if (A.hasOwnProperty(name))\n                    this.set(name, A[name])\n        }\n        if (typeof C === \"object\" && C instanceof Array)\n            this.add(C)\n        return this\n    }\n\n    /*  check the type of an AST node  */\n    type (T) {\n        if (arguments.length === 0)\n            return this.T\n        else if (arguments.length === 1) {\n            this.T = T\n            return this\n        }\n        else\n            throw new Error(\"type: invalid number of arguments\")\n    }\n\n    /*  set the parsing position   */\n    pos (line, column, offset) {\n        if (arguments.length === 0)\n            return {\n                line:   this.L.L,\n                column: this.L.C,\n                offset: this.L.O\n            }\n        else if (arguments.length <= 3) {\n            this.L.L = line   || 0\n            this.L.C = column || 0\n            this.L.O = offset || 0\n            return this\n        }\n        else\n            throw new Error(\"pos: invalid number of arguments\")\n    }\n\n    /*  set AST node attributes  */\n    set (...args) {\n        if (   args.length === 1\n            && typeof args[0] === \"object\") {\n            Object.keys(args[0]).forEach((key) => {\n                this.A[key] = args[0][key]\n            })\n        }\n        else if (args.length === 2)\n            this.A[args[0]] = args[1]\n        else\n            throw new Error(\"set: invalid number of arguments\")\n        return this\n    }\n\n    /*  unset AST node attributes  */\n    unset (...args) {\n        if (   args.length === 1\n            && typeof args[0] === \"object\"\n            && args[0] instanceof Array   ) {\n            args[0].forEach((key) => {\n                delete this.A[key]\n            })\n        }\n        else if (args.length === 1)\n            delete this.A[args[0]]\n        else\n            throw new Error(\"unset: invalid number of arguments\")\n        return this\n    }\n\n    /*  get AST node attributes  */\n    get (key) {\n        if (arguments.length !== 1)\n            throw new Error(\"get: invalid number of arguments\")\n        if (typeof key !== \"string\")\n            throw new Error(\"get: invalid key argument\")\n        return this.A[key]\n    }\n\n    /*  get names of all AST node attributes  */\n    attrs () {\n        return Object.keys(this.A)\n    }\n\n    /*  return current sibling position  */\n    nth () {\n        if (this.P === null)\n            return 1\n        let idx = this.P.C.indexOf(this)\n        if (idx < 0)\n            throw new Error(\"nth: internal error -- node not in childs of its parent\")\n        return idx\n    }\n\n    /*  insert child AST node(s)  */\n    ins (pos, ...args) {\n        if (args.length === 0)\n            throw new Error(\"ins: invalid number of arguments\")\n        if (pos < 0)\n            pos = (this.C.length + 1) - pos\n        if (!(0 <= pos && pos <= this.C.length))\n            throw new Error(\"ins: invalid position\")\n        let _ins = (node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"ins: invalid AST node argument\")\n            this.C.splice(pos++, 0, node)\n            node.P = this\n        }\n        args.forEach((arg) => {\n            if (typeof arg === \"object\" && arg instanceof Array)\n                arg.forEach((arg) => { _ins(arg) })\n            else if (arg !== null)\n                _ins(arg)\n        })\n        return this\n    }\n\n    /*  add child AST node(s)  */\n    add (...args) {\n        if (args.length === 0)\n            throw new Error(\"add: invalid number of arguments\")\n        let _add = (node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"add: invalid AST node argument\")\n            this.C.push(node)\n            node.P = this\n        }\n        args.forEach((arg) => {\n            if (typeof arg === \"object\" && arg instanceof Array)\n                arg.forEach((arg) => { _add(arg) })\n            else if (arg !== null)\n                _add(arg)\n        })\n        return this\n    }\n\n    /*  delete child AST node(s)  */\n    del (...args) {\n        if (args.length === 0)\n            throw new Error(\"del: invalid number of arguments\")\n        args.forEach((node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"del: invalid AST node argument\")\n            let found = false\n            for (let j = 0; j < this.C.length; j++) {\n                if (this.C[j] === node) {\n                    this.C.splice(j, 1)\n                    node.P = null\n                    found = true\n                    break\n                }\n            }\n            if (!found)\n                throw new Error(\"del: AST node not found in childs\")\n        })\n        return this\n    }\n\n    /*  get all or some child AST nodes  */\n    childs (...args) {\n        if (args.length > 2)\n            throw new Error(\"childs: invalid number of arguments\")\n        if (args.length === 2 && typeof args[0] === \"number\" && typeof args[1] === \"number\")\n            return this.C.slice(args[0], args[1])\n        else if (args.length === 1 && typeof args[0] === \"number\")\n            return this.C.slice(args[0])\n        else if (args.length === 0)\n            return this.C\n        else\n            throw new Error(\"childs: invalid type of arguments\")\n    }\n\n    /*  get one child AST node  */\n    child (pos) {\n        if (typeof pos !== \"number\")\n            throw new Error(\"child: invalid argument\")\n        return (pos < this.C.length ? this.C[pos] : null)\n    }\n\n    /*  get parent AST node  */\n    parent () {\n        return this.P\n    }\n\n    /*  serialize AST node recursively  */\n    serialize () {\n        return this.ctx.serialize(this.ctx, this)\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst tree = {\n    mid:  { unicode: String.fromCharCode(9500), ascii: \"+\" },\n    last: { unicode: String.fromCharCode(9492), ascii: \"+\" },\n    down: { unicode: String.fromCharCode(9474), ascii: \"|\" },\n    left: { unicode: String.fromCharCode(9472), ascii: \"-\" }\n}\n\nexport default class ASTYDump {\n    /*  dump the AST recursively  */\n    dump (maxDepth = Infinity, colorize = (type, txt) => txt, unicode = true) {\n        let out = \"\"\n        this.walk((node, depth /*, parent, when */) => {\n            /*  short-circuit processing at a certain depth  */\n            if (depth > maxDepth)\n                return\n\n            /*  draw tree structure  */\n            if (depth > 0) {\n                const nodeIndex = (node) => {\n                    let nth = 0\n                    let max = 0\n                    if (node.P !== null) {\n                        nth = node.P.C.indexOf(node)\n                        max = node.P.C.length - 1\n                    }\n                    return { nth, max }\n                }\n                let { nth, max } = nodeIndex(node)\n                let prefix = \" \"\n                if (unicode)\n                    prefix = `${tree.left.unicode}${tree.left.unicode}${prefix}`\n                else\n                    prefix = `${tree.left.ascii}${tree.left.ascii}${prefix}`\n                if (nth < max)\n                    prefix = `${unicode ? tree.mid.unicode : tree.mid.ascii}${prefix}`\n                else\n                    prefix = `${unicode ? tree.last.unicode : tree.last.ascii}${prefix}`\n                for (let parent = node.P; parent !== null; parent = parent.P) {\n                    if (parent.P !== null) {\n                        let { nth, max } = nodeIndex(parent)\n                        if (nth < max)\n                            prefix = `${unicode ? tree.down.unicode : tree.down.ascii}   ${prefix}`\n                        else\n                            prefix = `    ${prefix}`\n                    }\n                }\n                out += colorize(\"tree\", prefix)\n            }\n\n            /*  draw node type  */\n            out += colorize(\"type\", node.T) + \" \"\n\n            /*  draw node attributes  */\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                out += colorize(\"parenthesis\", \"(\")\n                let first = true\n                keys.forEach((key) => {\n                    if (!first)\n                        out += colorize(\"comma\", \",\") + \" \"\n                    else\n                        first = false\n                    out += colorize(\"key\", key) + colorize(\"colon\", \":\") + \" \"\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                            out += colorize(\"value\", value.toString())\n                            break\n                        case \"string\":\n                            let hex = (ch) => ch.charCodeAt(0).toString(16).toUpperCase()\n                            out += colorize(\"value\", \"\\\"\" +\n                                value.replace(/\\\\/g, \"\\\\\\\\\")\n                                    .replace(/\"/g, \"\\\\\\\"\")\n                                    .replace(/\\x08/g, \"\\\\b\")\n                                    .replace(/\\t/g, \"\\\\t\")\n                                    .replace(/\\n/g, \"\\\\n\")\n                                    .replace(/\\f/g, \"\\\\f\")\n                                    .replace(/\\r/g, \"\\\\r\")\n                                    .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, (ch) => \"\\\\x0\" + hex(ch))\n                                    .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    (ch) => \"\\\\x\"  + hex(ch))\n                                    .replace(/[\\u0100-\\u0FFF]/g,         (ch) => \"\\\\u0\" + hex(ch))\n                                    .replace(/[\\u1000-\\uFFFF]/g,         (ch) => \"\\\\u\"  + hex(ch)) +\n                                \"\\\"\")\n                            break\n                        case \"object\":\n                            if (value instanceof RegExp)\n                                out += colorize(\"value\", \"/\" + value.source + \"/\")\n                            else\n                                out += colorize(\"value\", JSON.stringify(value))\n                            break\n                        default:\n                            out += colorize(\"value\", JSON.stringify(value))\n                            break\n                    }\n                })\n                out += colorize(\"parenthesis\", \")\") + \" \"\n            }\n\n            /*  draw node position  */\n            out += colorize(\"position\",\n                colorize(\"bracket\", \"[\") +\n                colorize(\"line\", node.L.L) +\n                colorize(\"slash\", \",\") +\n                colorize(\"column\", node.L.C) +\n                colorize(\"bracket\", \"]\"))\n\n            out += \"\\n\"\n        }, \"downward\")\n        return out\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYMerge {\n    /*  merge attributes and childs of an AST node  */\n    merge (node, takePos = false, attrMap = {}) {\n        if (node === null)\n            return this\n        if (!this.ctx.isA(node))\n            throw new Error(\"merge: invalid AST node argument\")\n        if (takePos) {\n            let pos = node.pos()\n            this.pos(pos.L, pos.C, pos.O)\n        }\n        node.attrs().forEach((attrSource) => {\n            let attrTarget = (\n                  typeof attrMap[attrSource] !== \"undefined\"\n                ? attrMap[attrSource]\n                : attrSource\n            )\n            if (attrTarget !== null)\n                this.set(attrTarget, node.get(attrSource))\n        })\n        node.childs().forEach((child) => {\n            this.add(child)\n        })\n        return this\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYSerialize {\n    /*  recursively serialize AST nodes into JSON string  */\n    static serialize (asty, node) {\n        const serializeNode = (node) => {\n            let clone = {\n                T: node.T,\n                L: { L: node.L.L, C: node.L.C, O: node.L.O }\n            }\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                clone.A = {}\n                keys.forEach((key) => {\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                        case \"string\":\n                            clone.A[key] = value\n                            break\n                        default:\n                            /*  use the slow approach only for non-atomic attributes  */\n                            clone.A[key] = JSON.parse(JSON.stringify(value))\n                            break\n                    }\n                })\n            }\n            if (node.C.length > 0)\n                clone.C = node.C.map((C) => serializeNode(C))\n            return clone\n        }\n        if (!asty.isA(node))\n            throw new Error(\"serialize: not an ASTy node\")\n        return JSON.stringify({ ASTy: serializeNode(node) })\n    }\n\n    /*  recursively unserialize JSON string into AST nodes  */\n    static unserialize (asty, json) {\n        const unserializeNode = (clone) => {\n            let node = asty.create(clone.T)\n            node.pos(clone.L.L, clone.L.C, clone.L.O)\n            if (typeof clone.A === \"object\") {\n                Object.keys(clone.A).forEach((key) => {\n                    let value = clone.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                        case \"string\":\n                            node.set(key, value)\n                            break\n                        default:\n                            /*  use the slow approach only for non-atomic attributes  */\n                            node.set(key, JSON.parse(JSON.stringify(value)))\n                            break\n                    }\n                })\n            }\n            if (typeof clone.C === \"object\" && clone.C instanceof Array)\n                node.add(clone.C.map((C) => unserializeNode(C)))\n            return node\n        }\n        let obj = JSON.parse(json)\n        if (typeof obj !== \"object\" || typeof obj.ASTy !== \"object\")\n            throw new Error(\"unserialize: not an ASTy JSON export\")\n        return unserializeNode(obj.ASTy)\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/* global 1: false */\n/* global 6: false */\n/* global 0: false */\n/* global 20180317:  false */\n\nconst version = {\n    major: 1,\n    minor: 6,\n    micro: 0,\n    date:  20180317\n}\n\nexport default version\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYWalk {\n    /*  walk the AST recursively  */\n    walk (cb, when = \"downward\") {\n        let _walk = (node, depth, parent) => {\n            if (when === \"downward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"downward\")\n            node.C.forEach((child) => {\n                _walk(child, depth + 1, node)\n            })\n            if (when === \"upward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"upward\")\n        }\n        _walk(this, 0, null)\n        return this\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport ASTYBase      from \"./asty-base.js\"\nimport ASTYMerge     from \"./asty-merge.js\"\nimport ASTYWalk      from \"./asty-walk.js\"\nimport ASTYDump      from \"./asty-dump.js\"\nimport ASTYSerialize from \"./asty-serialize.js\"\nimport ASTYVersion   from \"./asty-version.js\"\n\nclass ASTYCtx {\n    constructor () {\n        this.ASTYNode = () => {}\n        let mixins = [\n            [ ASTYBase,  \"init\", \"type\", \"pos\",\n                         \"set\", \"unset\", \"get\", \"attrs\",\n                         \"nth\", \"ins\", \"add\", \"del\",\n                         \"childs\", \"child\", \"parent\",\n                         \"serialize\" ],\n            [ ASTYMerge, \"merge\" ],\n            [ ASTYWalk,  \"walk\" ],\n            [ ASTYDump,  \"dump\" ]\n        ]\n        mixins.forEach((mixin) => {\n            let proto = mixin[0].prototype\n            mixin.slice(1).forEach((method) => {\n                this.ASTYNode.prototype[method] = proto[method]\n            })\n        })\n        return this\n    }\n    version () {\n        return ASTYVersion\n    }\n    extend (mixin) {\n        for (let method in mixin)\n            if (mixin.hasOwnProperty(method))\n                this.ASTYNode.prototype[method] = mixin[method]\n        return this\n    }\n    create (type, attrs, childs) {\n        return (new this.ASTYNode()).init(this, type, attrs, childs)\n    }\n    isA (node) {\n        return (\n               typeof node === \"object\"\n            && node instanceof this.ASTYNode\n            && typeof node.ASTy === \"boolean\"\n            && node.ASTy === true\n        )\n    }\n    serialize (node) {\n        return ASTYSerialize.serialize(this, node)\n    }\n    unserialize (json) {\n        return ASTYSerialize.unserialize(this, json)\n    }\n}\n\n/*  export the traditional way for interoperability reasons\n    (as Babel would export an object with a 'default' field)  */\nmodule.exports = ASTYCtx\n\n"]}