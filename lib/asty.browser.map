{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/asty-dump.js","src/asty-base.js","src/asty.js","src/asty-version.js","src/asty-serialize.js","src/asty-merge.js","src/asty-walk.js"],"names":["ASTYDump","maxDepth","undefined","Infinity","out","this","walk","node","depth","i","T","keys","Object","A","length","first","forEach","key","value","_typeof","toString","hex","ch","charCodeAt","toUpperCase","replace","RegExp","source","JSON","stringify","L","C","ASTYBase","ctx","arguments","Error","ASTy","O","P","name","hasOwnProperty","set","Array","add","line","column","offset","_this","_len","args","_key","_this2","_len2","_key2","idx","indexOf","pos","_this3","_len3","_key3","_ins","isA","splice","arg","_this4","_len4","_key4","_add","push","_this5","_len5","_key5","found","j","serialize","_astyBase","require","_astyMerge","_astyWalk","_astyDump","_astySerialize","_astyVersion","ASTYCtx","_classCallCheck","ASTYNode","mixins","_astyBase2","_astyMerge2","_astyWalk2","_astyDump2","mixin","proto","prototype","slice","method","_astyVersion2","type","init","_astySerialize2","json","unserialize","module","exports","version","major","minor","micro","date","ASTYSerialize","asty","serializeNode","clone","parse","map","unserializeNode","create","obj","ASTYMerge","takePos","attrMap","attrs","attrSource","attrTarget","get","childs","child","ASTYWalk","cb","when","_walk","parent","call"],"mappings":"AAAA;gnBEwBqBgC,2GAEXC,EAAKvB,EAAGG,EAAGkB,GACb,GAAIG,UAAUpB,OAAS,EACnB,KAAM,IAAIqB,OAAM,oCAQpB,IAPA9B,KAAK4B,IAAMA,EACX5B,KAAK+B,MAAO,EACZ/B,KAAKK,EAAIA,EACTL,KAAKyB,GAAMA,EAAG,EAAGC,EAAG,EAAGM,EAAG,GAC1BhC,KAAKQ,KACLR,KAAK0B,KACL1B,KAAKiC,EAAI,KACQ,YAAb,mBAAOzB,GAAP,YAAAM,QAAON,IACP,IAAK,GAAI0B,KAAQ1B,GACTA,EAAE2B,eAAeD,IACjBlC,KAAKoC,IAAIF,EAAM1B,EAAE0B,GAI7B,OAFiB,YAAb,mBAAOR,GAAP,YAAAZ,QAAOY,KAAkBA,YAAaW,QACtCrC,KAAKsC,IAAIZ,GACN1B,kCAILK,GACF,GAAyB,IAArBwB,UAAUpB,OACV,MAAOT,MAAKK,CACX,IAAyB,IAArBwB,UAAUpB,OAEf,MADAT,MAAKK,EAAIA,EACFL,IAGP,MAAM,IAAI8B,OAAM,iEAInBS,EAAMC,EAAQC,GACf,GAAyB,IAArBZ,UAAUpB,OACV,OACI8B,KAAQvC,KAAKyB,EAAEA,EACfe,OAAQxC,KAAKyB,EAAEC,EACfe,OAAQzC,KAAKyB,EAAEO,EAElB,IAAIH,UAAUpB,QAAU,EAIzB,MAHAT,MAAKyB,EAAEA,EAAIc,GAAU,EACrBvC,KAAKyB,EAAEC,EAAIc,GAAU,EACrBxC,KAAKyB,EAAEO,EAAIS,GAAU,EACdzC,IAGP,MAAM,IAAI8B,OAAM,kEAIV,IAAA,GAAAY,GAAA1C,KAAA2C,EAAAd,UAAApB,OAANmC,EAAMP,MAAAM,GAAAE,EAAA,EAAAF,EAAAE,EAAAA,IAAND,EAAMC,GAAAhB,UAAAgB,EACV,IAAuB,IAAhBD,EAAKnC,QACc,WAAnBK,QAAO8B,EAAK,IACfrC,OAAOD,KAAKsC,EAAK,IAAIjC,QAAQ,SAACC,GAC1B8B,EAAKlC,EAAEI,GAAOgC,EAAK,GAAGhC,SAGzB,CAAA,GAAoB,IAAhBgC,EAAKnC,OAGV,KAAM,IAAIqB,OAAM,mCAFhB9B,MAAKQ,EAAEoC,EAAK,IAAMA,EAAK,GAG3B,MAAO5C,sCAIK,IAAA,GAAA8C,GAAA9C,KAAA+C,EAAAlB,UAAApB,OAANmC,EAAMP,MAAAU,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,IAANJ,EAAMI,GAAAnB,UAAAmB,EACZ,IAAuB,IAAhBJ,EAAKnC,QACc,WAAnBK,QAAO8B,EAAK,KACZA,EAAK,YAAcP,OACtBO,EAAK,GAAGjC,QAAQ,SAACC,SACNkC,GAAKtC,EAAEI,SAGjB,CAAA,GAAoB,IAAhBgC,EAAKnC,OAGV,KAAM,IAAIqB,OAAM,4CAFT9B,MAAKQ,EAAEoC,EAAK,IAGvB,MAAO5C,kCAINY,GACD,GAAyB,IAArBiB,UAAUpB,OACV,KAAM,IAAIqB,OAAM,mCACpB,IAAmB,gBAARlB,GACP,KAAM,IAAIkB,OAAM,4BACpB,OAAO9B,MAAKQ,EAAEI,mCAKd,MAAOL,QAAOD,KAAKN,KAAKQ,iCAKxB,GAAe,OAAXR,KAAKiC,EACL,MAAO,EACX,IAAIgB,GAAMjD,KAAKiC,EAAEP,EAAEwB,QAAQlD,KAC3B,IAAU,EAANiD,EACA,KAAM,IAAInB,OAAM,0DACpB,OAAOmB,+BAINE,GAAc,IAAA,GAAAC,GAAApD,KAAAqD,EAAAxB,UAAApB,OAANmC,EAAMP,MAAAgB,EAAA,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,IAANV,EAAMU,EAAA,GAAAzB,UAAAyB,EACf,IAAoB,IAAhBV,EAAKnC,OACL,KAAM,IAAIqB,OAAM,mCAGpB,IAFU,EAANqB,IACAA,EAAOnD,KAAK0B,EAAEjB,OAAS,EAAK0C,KACrBA,GAAL,GAAYA,GAAOnD,KAAK0B,EAAEjB,QAC5B,KAAM,IAAIqB,OAAM,wBACpB,IAAIyB,GAAO,SAACrD,GACR,IAAKkD,EAAKxB,IAAI4B,IAAItD,GACd,KAAM,IAAI4B,OAAM,iCACpBsB,GAAK1B,EAAE+B,OAAON,IAAO,EAAGjD,GACxBA,EAAK+B,EAALmB,EAQJ,OANAR,GAAKjC,QAAQ,SAAC+C,GACS,YAAf,mBAAOA,GAAP,YAAA5C,QAAO4C,KAAoBA,YAAerB,OAC1CqB,EAAI/C,QAAQ,SAAC+C,GAAUH,EAAKG,KACf,OAARA,GACLH,EAAKG,KAEN1D,mCAIG,IAAA,GAAA2D,GAAA3D,KAAA4D,EAAA/B,UAAApB,OAANmC,EAAMP,MAAAuB,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,IAANjB,EAAMiB,GAAAhC,UAAAgC,EACV,IAAoB,IAAhBjB,EAAKnC,OACL,KAAM,IAAIqB,OAAM,mCACpB,IAAIgC,GAAO,SAAC5D,GACR,IAAKyD,EAAK/B,IAAI4B,IAAItD,GACd,KAAM,IAAI4B,OAAM,iCACpB6B,GAAKjC,EAAEqC,KAAK7D,GACZA,EAAK+B,EAAL0B,EAQJ,OANAf,GAAKjC,QAAQ,SAAC+C,GACS,YAAf,mBAAOA,GAAP,YAAA5C,QAAO4C,KAAoBA,YAAerB,OAC1CqB,EAAI/C,QAAQ,SAAC+C,GAAUI,EAAKJ,KACf,OAARA,GACLI,EAAKJ,KAEN1D,mCAIG,IAAA,GAAAgE,GAAAhE,KAAAiE,EAAApC,UAAApB,OAANmC,EAAMP,MAAA4B,GAAAC,EAAA,EAAAD,EAAAC,EAAAA,IAANtB,EAAMsB,GAAArC,UAAAqC,EACV,IAAoB,IAAhBtB,EAAKnC,OACL,KAAM,IAAIqB,OAAM,kCAgBpB,OAfAc,GAAKjC,QAAQ,SAACT,GACV,IAAK8D,EAAKpC,IAAI4B,IAAItD,GACd,KAAM,IAAI4B,OAAM,iCAEpB,KAAK,GADDqC,IAAQ,EACHC,EAAI,EAAGA,EAAIJ,EAAKtC,EAAEjB,OAAQ2D,IAC/B,GAAIJ,EAAKtC,EAAE0C,KAAOlE,EAAM,CACpB8D,EAAKtC,EAAE+B,OAAOW,EAAG,GACjBlE,EAAK+B,EAAI,KACTkC,GAAQ,CACR,OAGR,IAAKA,EACD,KAAM,IAAIrC,OAAM,uCAEjB9B,sCAKP,MAAOA,MAAK0B,mCAKZ,MAAO1B,MAAKiC,sCAKZ,MAAOjC,MAAK4B,IAAIyC,UAAUrE,KAAK4B,IAAK5B,kCAvLvB2B;;gnBDAAhC,2GAEXC,GACeC,SAAbD,IACAA,EAAWE,EAAAA,EACf,IAAIC,GAAM,EAsDV,OArDAC,MAAKC,KAAK,SAACC,EAAMC,GACb,KAAIA,EAAQP,GAAZ,CAEA,IAAK,GAAIQ,GAAI,EAAOD,EAAJC,EAAWA,IACvBL,GAAO,MACXA,IAAOG,EAAKG,EAAI,GAChB,IAAIC,GAAOC,OAAOD,KAAKJ,EAAKM,EACxBF,GAAKG,OAAS,IAAG,WACjBV,GAAO,GACP,IAAIW,IAAQ,CACZJ,GAAKK,QAAQ,SAACC,GACLF,EAGDA,GAAQ,EAFRX,GAAO,KAGXA,GAAOa,EAAM,IACb,IAAIC,GAAQX,EAAKM,EAAEI,EACnB,QAAA,mBAAeC,GAAf,YAAAC,QAAeD,IACX,IAAK,UACL,IAAK,SACDd,GAAOc,EAAME,UACb,MACJ,KAAK,SACD,GAAIC,GAAM,SAACC,GAAD,MAAQA,GAAGC,WAAW,GAAGH,SAAS,IAAII,cAChDpB,IAAO,IACHc,EAAMO,QAAQ,MAAO,QAChBA,QAAQ,KAAM,OACdA,QAAQ,QAAS,OACjBA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,2BAA4B,SAACH,GAAD,MAAQ,OAASD,EAAIC,KACzDG,QAAQ,wBAA4B,SAACH,GAAD,MAAQ,MAASD,EAAIC,KACzDG,QAAQ,mBAA4B,SAACH,GAAD,MAAQ,OAASD,EAAIC,KACzDG,QAAQ,mBAA4B,SAACH,GAAD,MAAQ,MAASD,EAAIC,KAC9D,GACJ,MACJ,KAAK,SAEGlB,GADAc,YAAiBQ,QACVR,EAAMS,OAENC,KAAKC,UAAUX,EAC1B,MACJ,SACId,GAAOwB,KAAKC,UAAUX,MAIlCd,GAAO,QAEXA,GAAO,IAAMG,EAAKuB,EAAEA,EAAI,IAAMvB,EAAKuB,EAAEC,EAAI,QAC1C,YACI3B,8BA3DMJ;;obKAAqH,6GAEV9G,GAAqC,GAAAwC,GAAA1C,KAA/BiH,EAA+BpF,UAAApB,QAAA,GAAAZ,SAAAgC,UAAA,IAArB,EAAqBA,UAAA,GAAdqF,EAAcrF,UAAApB,QAAA,GAAAZ,SAAAgC,UAAA,MAAAA,UAAA,EACxC,KAAK7B,KAAK4B,IAAI4B,IAAItD,GACd,KAAM,IAAI4B,OAAM,mCACpB,IAAImF,EAAS,CACT,GAAI9D,GAAMjD,EAAKiD,KACfnD,MAAKmD,IAAIA,EAAI1B,EAAG0B,EAAIzB,EAAGyB,EAAInB,GAc/B,MAZA9B,GAAKiH,QAAQxG,QAAQ,SAACyG,GAClB,GAAIC,GACiC,mBAAxBH,GAAQE,GACfF,EAAQE,GACRA,CAEa,QAAfC,GACA3E,EAAKN,IAAIiF,EAAYnH,EAAKoH,IAAIF,MAEtClH,EAAKqH,SAAS5G,QAAQ,SAAC6G,GACnB9E,EAAKJ,IAAIkF,KAENxH,iCArBMgH;;gnBDAAT,0HAECC,EAAMtG,GACpB,GAAMuG,GAAgB,QAAhBA,GAAiBvG,GACnB,GAAIwG,IACArG,EAAGH,EAAKG,EACRoB,GAAKA,EAAGvB,EAAKuB,EAAEA,EAAGC,EAAGxB,EAAKuB,EAAEC,EAAGM,EAAG9B,EAAKuB,EAAEO,IAEzC1B,EAAOC,OAAOD,KAAKJ,EAAKM,EAoB5B,OAnBIF,GAAKG,OAAS,IACdiG,EAAMlG,KACNF,EAAKK,QAAQ,SAACC,GACV,GAAIC,GAAQX,EAAKM,EAAEI,EACnB,QAAA,mBAAeC,GAAf,YAAAC,QAAeD,IACX,IAAK,UACL,IAAK,SACL,IAAK,SACD6F,EAAMlG,EAAEI,GAAOC,CACf,MACJ,SAEI6F,EAAMlG,EAAEI,GAAOW,KAAKoF,MAAMpF,KAAKC,UAAUX,QAKrDX,EAAKwB,EAAEjB,OAAS,IAChBiG,EAAMhF,EAAIxB,EAAKwB,EAAEkF,IAAI,SAAClF,GAAD,MAAO+E,GAAc/E,MACvCgF,EAEX,KAAKF,EAAKhD,IAAItD,GACV,KAAM,IAAI4B,OAAM,8BACpB,OAAOP,MAAKC,WAAYO,KAAM0E,EAAcvG,yCAI5BsG,EAAMV,GACtB,GAAMe,GAAkB,QAAlBA,GAAmBH,GACrB,GAAIxG,GAAOsG,EAAKM,OAAOJ,EAAMrG,EAoB7B,OAnBAH,GAAKiD,IAAIuD,EAAMjF,EAAEA,EAAGiF,EAAMjF,EAAEC,EAAGgF,EAAMjF,EAAEO,GAChB,WAAnBlB,QAAO4F,EAAMlG,IACbD,OAAOD,KAAKoG,EAAMlG,GAAGG,QAAQ,SAACC,GAC1B,GAAIC,GAAQ6F,EAAMlG,EAAEI,EACpB,QAAA,mBAAeC,GAAf,YAAAC,QAAeD,IACX,IAAK,UACL,IAAK,SACL,IAAK,SACDX,EAAKkC,IAAIxB,EAAKC,EACd,MACJ,SAEIX,EAAKkC,IAAIxB,EAAKW,KAAKoF,MAAMpF,KAAKC,UAAUX,QAKjC,WAAnBC,QAAO4F,EAAMhF,IAAkBgF,EAAMhF,YAAaW,QAClDnC,EAAKoC,IAAIoE,EAAMhF,EAAEkF,IAAI,SAAClF,GAAD,MAAOmF,GAAgBnF,MACzCxB,GAEP6G,EAAMxF,KAAKoF,MAAMb,EACrB,IAAmB,YAAf,mBAAOiB,GAAP,YAAAjG,QAAOiG,KAAwC,WAApBjG,QAAOiG,EAAIhF,MACtC,KAAM,IAAID,OAAM,uCACpB,OAAO+E,GAAgBE,EAAIhF,kCA/DdwE;;mEDKrB,IAAML,UACFC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,KAAO,6BAGIJ;;obGZMuB,2GAEXC,GAAuB,GAAnBC,GAAmB9F,UAAApB,QAAA,GAAAZ,SAAAgC,UAAA,GAAZ,WAAYA,UAAA,GACrB+F,EAAQ,QAARA,GAAS1H,EAAMC,EAAO0H,GACT,aAATF,GAAgC,SAATA,GACvBD,EAAGI,KAAK,KAAM5H,EAAMC,EAAO0H,EAAQ,YACvC3H,EAAKwB,EAAEf,QAAQ,SAAC6G,GACZI,EAAMJ,EAAOrH,EAAQ,EAAGD,KAEf,WAATyH,GAA8B,SAATA,GACrBD,EAAGI,KAAK,KAAM5H,EAAMC,EAAO0H,EAAQ,UAG3C,OADAD,GAAM5H,KAAM,EAAG,MACRA,iCAbMyH;;moBJArBnD,UAAAC,QAAA,+DACAC,WAAAD,QAAA,kEACAE,UAAAF,QAAA,+DACAG,UAAAH,QAAA,+DACAI,eAAAJ,QAAA,8EACAK,aAAAL,QAAA,wEAEMM,mBACF,QAAAA,KAAe,GAAAnC,GAAA1C,IAAA8E,iBAAA9E,KAAA6E,GACX7E,KAAK+E,SAAW,YAChB,IAAIC,KACAC,WAAAA,WAAa,OAAQ,OAAQ,MAChB,MAAO,QAAS,MAAO,QACvB,MAAO,MAAO,MAAO,MACrB,SAAU,SAAU,cACjCC,YAAAA,WAAa,UACbC,WAAAA,WAAa,SACbC,WAAAA,WAAa,QAQjB,OANAJ,GAAOrE,QAAQ,SAAC0E,GACZ,GAAIC,GAAQD,EAAM,GAAGE,SACrBF,GAAMG,MAAM,GAAG7E,QAAQ,SAAC8E,GACpB/C,EAAKqC,SAASQ,UAAUE,GAAUH,EAAMG,OAGzCzF,4DAGP,MAAA0F,eAAAA,0CAEIL,GACJ,IAAK,GAAII,KAAUJ,GACXA,EAAMlD,eAAesD,KACrBzF,KAAK+E,SAASQ,UAAUE,GAAUJ,EAAMI,GAChD,OAAOzF,qCAEH2F,GACJ,OAAQ,GAAI3F,MAAK+E,UAAYa,KAAK5F,KAAM2F,+BAEvCzF,GACD,MACuB,YAAhB,mBAAOA,GAAP,YAAAY,QAAOZ,KACPA,YAAgBF,MAAK+E,UACA,iBAAd7E,GAAK6B,MACZ7B,EAAK6B,QAAS,oCAGd7B,GACP,MAAO2F,iBAAAA,WAAcxB,UAAUrE,KAAME,uCAE5B4F,GACT,MAAOD,iBAAAA,WAAcE,YAAY/F,KAAM8F,WAM/CE,QAAOC,QAAUpB","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYDump {\n    /*  dump the AST recursively  */\n    dump (maxDepth) {\n        if (maxDepth === undefined)\n            maxDepth = Infinity\n        let out = \"\"\n        this.walk((node, depth /*, parent, when */) => {\n            if (depth > maxDepth)\n                return\n            for (let i = 0; i < depth; i++)\n                out += \"    \"\n            out += node.T + \" \"\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                out += \"(\"\n                let first = true\n                keys.forEach((key) => {\n                    if (!first)\n                        out += \", \"\n                    else\n                        first = false\n                    out += key + \": \"\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                            out += value.toString()\n                            break\n                        case \"string\":\n                            let hex = (ch) => ch.charCodeAt(0).toString(16).toUpperCase()\n                            out += \"\\\"\" +\n                                value.replace(/\\\\/g, \"\\\\\\\\\")\n                                    .replace(/\"/g, \"\\\\\\\"\")\n                                    .replace(/\\x08/g, \"\\\\b\")\n                                    .replace(/\\t/g, \"\\\\t\")\n                                    .replace(/\\n/g, \"\\\\n\")\n                                    .replace(/\\f/g, \"\\\\f\")\n                                    .replace(/\\r/g, \"\\\\r\")\n                                    .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, (ch) => \"\\\\x0\" + hex(ch))\n                                    .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    (ch) => \"\\\\x\"  + hex(ch))\n                                    .replace(/[\\u0100-\\u0FFF]/g,         (ch) => \"\\\\u0\" + hex(ch))\n                                    .replace(/[\\u1000-\\uFFFF]/g,         (ch) => \"\\\\u\"  + hex(ch)) +\n                                \"\\\"\"\n                            break\n                        case \"object\":\n                            if (value instanceof RegExp)\n                                out += value.source\n                            else\n                                out += JSON.stringify(value)\n                            break\n                        default:\n                            out += JSON.stringify(value)\n                            break\n                    }\n                })\n                out += \") \"\n            }\n            out += \"[\" + node.L.L + \"/\" + node.L.C + \"]\\n\"\n        }, \"downward\")\n        return out\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYBase {\n    /*  AST node initialization  */\n    init (ctx, T, A, C) {\n        if (arguments.length < 2)\n            throw new Error(\"init: invalid number of arguments\")\n        this.ctx = ctx\n        this.ASTy = true\n        this.T = T\n        this.L = { L: 0, C: 0, O: 0 }\n        this.A = {}\n        this.C = []\n        this.P = null\n        if (typeof A === \"object\") {\n            for (let name in A)\n                if (A.hasOwnProperty(name))\n                    this.set(name, A[name])\n        }\n        if (typeof C === \"object\" && C instanceof Array)\n            this.add(C)\n        return this\n    }\n\n    /*  check the type of an AST node  */\n    type (T) {\n        if (arguments.length === 0)\n            return this.T\n        else if (arguments.length === 1) {\n            this.T = T\n            return this\n        }\n        else\n            throw new Error(\"type: invalid number of arguments\")\n    }\n\n    /*  set the parsing position   */\n    pos (line, column, offset) {\n        if (arguments.length === 0)\n            return {\n                line:   this.L.L,\n                column: this.L.C,\n                offset: this.L.O\n            }\n        else if (arguments.length <= 3) {\n            this.L.L = line   || 0\n            this.L.C = column || 0\n            this.L.O = offset || 0\n            return this\n        }\n        else\n            throw new Error(\"pos: invalid number of arguments\")\n    }\n\n    /*  set AST node attributes  */\n    set (...args) {\n        if (   args.length === 1\n            && typeof args[0] === \"object\") {\n            Object.keys(args[0]).forEach((key) => {\n                this.A[key] = args[0][key]\n            })\n        }\n        else if (args.length === 2)\n            this.A[args[0]] = args[1]\n        else\n            throw new Error(\"set: invalid number of arguments\")\n        return this\n    }\n\n    /*  unset AST node attributes  */\n    unset (...args) {\n        if (   args.length === 1\n            && typeof args[0] === \"object\"\n            && args[0] instanceof Array   ) {\n            args[0].forEach((key) => {\n                delete this.A[key]\n            })\n        }\n        else if (args.length === 1)\n            delete this.A[args[0]]\n        else\n            throw new Error(\"unset: invalid number of arguments\")\n        return this\n    }\n\n    /*  get AST node attributes  */\n    get (key) {\n        if (arguments.length !== 1)\n            throw new Error(\"get: invalid number of arguments\")\n        if (typeof key !== \"string\")\n            throw new Error(\"get: invalid key argument\")\n        return this.A[key]\n    }\n\n    /*  get names of all AST node attributes  */\n    attrs () {\n        return Object.keys(this.A)\n    }\n\n    /*  return current sibling position  */\n    nth () {\n        if (this.P === null)\n            return 1\n        let idx = this.P.C.indexOf(this)\n        if (idx < 0)\n            throw new Error(\"nth: internal error -- node not in childs of its parent\")\n        return idx\n    }\n\n    /*  insert child AST node(s)  */\n    ins (pos, ...args) {\n        if (args.length === 0)\n            throw new Error(\"ins: invalid number of arguments\")\n        if (pos < 0)\n            pos = (this.C.length + 1) - pos\n        if (!(0 <= pos && pos <= this.C.length))\n            throw new Error(\"ins: invalid position\")\n        let _ins = (node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"ins: invalid AST node argument\")\n            this.C.splice(pos++, 0, node)\n            node.P = this\n        }\n        args.forEach((arg) => {\n            if (typeof arg === \"object\" && arg instanceof Array)\n                arg.forEach((arg) => { _ins(arg) })\n            else if (arg !== null)\n                _ins(arg)\n        })\n        return this\n    }\n\n    /*  add child AST node(s)  */\n    add (...args) {\n        if (args.length === 0)\n            throw new Error(\"add: invalid number of arguments\")\n        let _add = (node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"add: invalid AST node argument\")\n            this.C.push(node)\n            node.P = this\n        }\n        args.forEach((arg) => {\n            if (typeof arg === \"object\" && arg instanceof Array)\n                arg.forEach((arg) => { _add(arg) })\n            else if (arg !== null)\n                _add(arg)\n        })\n        return this\n    }\n\n    /*  delete child AST node(s)  */\n    del (...args) {\n        if (args.length === 0)\n            throw new Error(\"del: invalid number of argument\")\n        args.forEach((node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"del: invalid AST node argument\")\n            let found = false\n            for (let j = 0; j < this.C.length; j++) {\n                if (this.C[j] === node) {\n                    this.C.splice(j, 1)\n                    node.P = null\n                    found = true\n                    break\n                }\n            }\n            if (!found)\n                throw new Error(\"del: AST node not found in childs\")\n        })\n        return this\n    }\n\n    /*  get child AST nodes  */\n    childs () {\n        return this.C\n    }\n\n    /*  get parent AST node  */\n    parent () {\n        return this.P\n    }\n\n    /*  serialize AST node recursively  */\n    serialize () {\n        return this.ctx.serialize(this.ctx, this)\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport ASTYBase      from \"./asty-base.js\"\nimport ASTYMerge     from \"./asty-merge.js\"\nimport ASTYWalk      from \"./asty-walk.js\"\nimport ASTYDump      from \"./asty-dump.js\"\nimport ASTYSerialize from \"./asty-serialize.js\"\nimport ASTYVersion   from \"./asty-version.js\"\n\nclass ASTYCtx {\n    constructor () {\n        this.ASTYNode = () => {}\n        let mixins = [\n            [ ASTYBase,  \"init\", \"type\", \"pos\",\n                         \"set\", \"unset\", \"get\", \"attrs\",\n                         \"nth\", \"ins\", \"add\", \"del\",\n                         \"childs\", \"parent\", \"serialize\" ],\n            [ ASTYMerge, \"merge\" ],\n            [ ASTYWalk,  \"walk\" ],\n            [ ASTYDump,  \"dump\" ]\n        ]\n        mixins.forEach((mixin) => {\n            let proto = mixin[0].prototype\n            mixin.slice(1).forEach((method) => {\n                this.ASTYNode.prototype[method] = proto[method]\n            })\n        })\n        return this\n    }\n    version () {\n        return ASTYVersion\n    }\n    extend (mixin) {\n        for (let method in mixin)\n            if (mixin.hasOwnProperty(method))\n                this.ASTYNode.prototype[method] = mixin[method]\n        return this\n    }\n    create (type) {\n        return (new this.ASTYNode()).init(this, type)\n    }\n    isA (node) {\n        return (\n               typeof node === \"object\"\n            && node instanceof this.ASTYNode\n            && typeof node.ASTy === \"boolean\"\n            && node.ASTy === true\n        )\n    }\n    serialize (node) {\n        return ASTYSerialize.serialize(this, node)\n    }\n    unserialize (json) {\n        return ASTYSerialize.unserialize(this, json)\n    }\n}\n\n/*  export the traditional way for interoperability reasons\n    (as Babel would export an object with a 'default' field)  */\nmodule.exports = ASTYCtx\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/* global 1: false */\n/* global 4: false */\n/* global 4: false */\n/* global 20160519:  false */\n\nconst version = {\n    major: 1,\n    minor: 4,\n    micro: 4,\n    date:  20160519\n}\n\nexport default version\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYSerialize {\n    /*  recursively serialize AST nodes into JSON string  */\n    static serialize (asty, node) {\n        const serializeNode = (node) => {\n            let clone = {\n                T: node.T,\n                L: { L: node.L.L, C: node.L.C, O: node.L.O }\n            }\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                clone.A = {}\n                keys.forEach((key) => {\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                        case \"string\":\n                            clone.A[key] = value\n                            break\n                        default:\n                            /*  use the slow approach only for non-atomic attributes  */\n                            clone.A[key] = JSON.parse(JSON.stringify(value))\n                            break\n                    }\n                })\n            }\n            if (node.C.length > 0)\n                clone.C = node.C.map((C) => serializeNode(C))\n            return clone\n        }\n        if (!asty.isA(node))\n            throw new Error(\"serialize: not an ASTy node\")\n        return JSON.stringify({ ASTy: serializeNode(node) })\n    }\n\n    /*  recursively unserialize JSON string into AST nodes  */\n    static unserialize (asty, json) {\n        const unserializeNode = (clone) => {\n            let node = asty.create(clone.T)\n            node.pos(clone.L.L, clone.L.C, clone.L.O)\n            if (typeof clone.A === \"object\") {\n                Object.keys(clone.A).forEach((key) => {\n                    let value = clone.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                        case \"string\":\n                            node.set(key, value)\n                            break\n                        default:\n                            /*  use the slow approach only for non-atomic attributes  */\n                            node.set(key, JSON.parse(JSON.stringify(value)))\n                            break\n                    }\n                })\n            }\n            if (typeof clone.C === \"object\" && clone.C instanceof Array)\n                node.add(clone.C.map((C) => unserializeNode(C)))\n            return node\n        }\n        let obj = JSON.parse(json)\n        if (typeof obj !== \"object\" || typeof obj.ASTy !== \"object\")\n            throw new Error(\"unserialize: not an ASTy JSON export\")\n        return unserializeNode(obj.ASTy)\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYMerge {\n    /*  merge attributes and childs of an AST node  */\n    merge (node, takePos = false, attrMap = {}) {\n        if (!this.ctx.isA(node))\n            throw new Error(\"merge: invalid AST node argument\")\n        if (takePos) {\n            let pos = node.pos()\n            this.pos(pos.L, pos.C, pos.O)\n        }\n        node.attrs().forEach((attrSource) => {\n            let attrTarget = (\n                  typeof attrMap[attrSource] !== \"undefined\"\n                ? attrMap[attrSource]\n                : attrSource\n            )\n            if (attrTarget !== null)\n                this.set(attrTarget, node.get(attrSource))\n        })\n        node.childs().forEach((child) => {\n            this.add(child)\n        })\n        return this\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2016 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYWalk {\n    /*  walk the AST recursively  */\n    walk (cb, when = \"downward\") {\n        let _walk = (node, depth, parent) => {\n            if (when === \"downward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"downward\")\n            node.C.forEach((child) => {\n                _walk(child, depth + 1, node)\n            })\n            if (when === \"upward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"upward\")\n        }\n        _walk(this, 0, null)\n        return this\n    }\n}\n\n"]}