{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/asty-base.js","src/asty-dump.js","src/asty-merge.js","src/asty-serialize.js","src/asty-version.js","src/asty-walk.js","src/asty.js"],"names":["ASTYBase","ctx","T","A","C","arguments","length","Error","this","ASTy","L","O","P","_typeof","name","hasOwnProperty","set","Array","add","create","line","column","offset","_this","_len","args","_key","Object","keys","forEach","key","_this2","_len2","_key2","idx","indexOf","pos","_this3","_len3","_key3","_ins","node","isA","splice","arg","_this4","_len4","_key4","_add","push","_this5","_len5","_key5","found","j","undefined","slice","serialize","tree","mid","unicode","String","fromCharCode","ascii","last","down","left","ASTYDump","maxDepth","Infinity","colorize","type","txt","out","self","walk","depth","nodeIndex","nth","max","_nodeIndex","prefix","parent","_nodeIndex2","first","value","toString","hex","ch","charCodeAt","toUpperCase","replace","RegExp","source","JSON","stringify","ASTYMerge","takePos","attrMap","attrs","attrSource","attrTarget","get","childs","child","ASTYSerialize","asty","serializeNode","clone","parse","map","json","obj","unserializeNode","version","major","minor","micro","date","ASTYWalk","cb","when","_walk","call","_astyBase","require","_astyMerge","_astyWalk","_astyDump","_astySerialize","_astyVersion","ASTYCtx","_classCallCheck","ASTYNode","_astyBase2","default","_astyMerge2","_astyWalk2","_astyDump2","mixin","proto","prototype","method","_astyVersion2","init","_astySerialize2","unserialize","module","exports"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYBase {\n    /*  AST node initialization  */\n    init (ctx, T, A, C) {\n        if (arguments.length < 2)\n            throw new Error(\"init: invalid number of arguments\")\n        this.ctx = ctx\n        this.ASTy = true\n        this.T = T\n        this.L = { L: 0, C: 0, O: 0 }\n        this.A = {}\n        this.C = []\n        this.P = null\n        if (typeof A === \"object\") {\n            for (let name in A)\n                if (A.hasOwnProperty(name))\n                    this.set(name, A[name])\n        }\n        if (typeof C === \"object\" && C instanceof Array)\n            this.add(C)\n        return this\n    }\n\n    /*  create new AST node  */\n    create (T, A, C) {\n        return this.ctx.create(T, A, C)\n    }\n\n    /*  check the type of an AST node  */\n    type (T) {\n        if (arguments.length === 0)\n            return this.T\n        else if (arguments.length === 1) {\n            this.T = T\n            return this\n        }\n        else\n            throw new Error(\"type: invalid number of arguments\")\n    }\n\n    /*  set the parsing position   */\n    pos (line, column, offset) {\n        if (arguments.length === 0)\n            return {\n                line:   this.L.L,\n                column: this.L.C,\n                offset: this.L.O\n            }\n        else if (arguments.length <= 3) {\n            this.L.L = line   || 0\n            this.L.C = column || 0\n            this.L.O = offset || 0\n            return this\n        }\n        else\n            throw new Error(\"pos: invalid number of arguments\")\n    }\n\n    /*  set AST node attributes  */\n    set (...args) {\n        if (   args.length === 1\n            && typeof args[0] === \"object\") {\n            Object.keys(args[0]).forEach((key) => {\n                this.A[key] = args[0][key]\n            })\n        }\n        else if (args.length === 2)\n            this.A[args[0]] = args[1]\n        else\n            throw new Error(\"set: invalid number of arguments\")\n        return this\n    }\n\n    /*  unset AST node attributes  */\n    unset (...args) {\n        if (   args.length === 1\n            && typeof args[0] === \"object\"\n            && args[0] instanceof Array   ) {\n            args[0].forEach((key) => {\n                delete this.A[key]\n            })\n        }\n        else if (args.length === 1)\n            delete this.A[args[0]]\n        else\n            throw new Error(\"unset: invalid number of arguments\")\n        return this\n    }\n\n    /*  get AST node attributes  */\n    get (key) {\n        if (arguments.length !== 1)\n            throw new Error(\"get: invalid number of arguments\")\n        if (typeof key !== \"string\")\n            throw new Error(\"get: invalid key argument\")\n        return this.A[key]\n    }\n\n    /*  get names of all AST node attributes  */\n    attrs () {\n        return Object.keys(this.A)\n    }\n\n    /*  return current sibling position  */\n    nth () {\n        if (this.P === null)\n            return 1\n        let idx = this.P.C.indexOf(this)\n        if (idx < 0)\n            throw new Error(\"nth: internal error -- node not in childs of its parent\")\n        return idx\n    }\n\n    /*  insert child AST node(s)  */\n    ins (pos, ...args) {\n        if (args.length === 0)\n            throw new Error(\"ins: invalid number of arguments\")\n        if (pos < 0)\n            pos = (this.C.length + 1) - pos\n        if (!(0 <= pos && pos <= this.C.length))\n            throw new Error(\"ins: invalid position\")\n        let _ins = (node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"ins: invalid AST node argument\")\n            this.C.splice(pos++, 0, node)\n            node.P = this\n        }\n        args.forEach((arg) => {\n            if (typeof arg === \"object\" && arg instanceof Array)\n                arg.forEach((arg) => { _ins(arg) })\n            else if (arg !== null)\n                _ins(arg)\n        })\n        return this\n    }\n\n    /*  add child AST node(s)  */\n    add (...args) {\n        if (args.length === 0)\n            throw new Error(\"add: invalid number of arguments\")\n        let _add = (node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"add: invalid AST node argument\")\n            this.C.push(node)\n            node.P = this\n        }\n        args.forEach((arg) => {\n            if (typeof arg === \"object\" && arg instanceof Array)\n                arg.forEach((arg) => { _add(arg) })\n            else if (arg !== null)\n                _add(arg)\n        })\n        return this\n    }\n\n    /*  delete child AST node(s)  */\n    del (...args) {\n        if (args.length === 0)\n            throw new Error(\"del: invalid number of arguments\")\n        args.forEach((node) => {\n            if (!this.ctx.isA(node))\n                throw new Error(\"del: invalid AST node argument\")\n            let found = false\n            for (let j = 0; j < this.C.length; j++) {\n                if (this.C[j] === node) {\n                    this.C.splice(j, 1)\n                    node.P = null\n                    found = true\n                    break\n                }\n            }\n            if (!found)\n                throw new Error(\"del: AST node not found in childs\")\n        })\n        return this\n    }\n\n    /*  get all or some child AST nodes  */\n    childs (...args) {\n        if (args.length > 2)\n            throw new Error(\"childs: invalid number of arguments\")\n        if (args.length === 2 && typeof args[0] === \"number\" && typeof args[1] === \"number\")\n            return this.C.slice(args[0], args[1])\n        else if (args.length === 1 && typeof args[0] === \"number\")\n            return this.C.slice(args[0])\n        else if (args.length === 0)\n            return this.C\n        else\n            throw new Error(\"childs: invalid type of arguments\")\n    }\n\n    /*  get one child AST node  */\n    child (pos) {\n        if (typeof pos !== \"number\")\n            throw new Error(\"child: invalid argument\")\n        return (pos < this.C.length ? this.C[pos] : null)\n    }\n\n    /*  get parent AST node  */\n    parent () {\n        return this.P\n    }\n\n    /*  serialize AST node recursively  */\n    serialize () {\n        return this.ctx.serialize(this.ctx, this)\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst tree = {\n    mid:  { unicode: String.fromCharCode(9500), ascii: \"+\" },\n    last: { unicode: String.fromCharCode(9492), ascii: \"+\" },\n    down: { unicode: String.fromCharCode(9474), ascii: \"|\" },\n    left: { unicode: String.fromCharCode(9472), ascii: \"-\" }\n}\n\nexport default class ASTYDump {\n    /*  dump the AST recursively  */\n    dump (maxDepth = Infinity, colorize = (type, txt) => txt, unicode = true) {\n        let out = \"\"\n        let self = this\n        this.walk((node, depth /*, parent, when */) => {\n            /*  short-circuit processing at a certain depth  */\n            if (depth > maxDepth)\n                return\n\n            /*  draw tree structure  */\n            if (depth > 0) {\n                const nodeIndex = (node) => {\n                    let nth = 0\n                    let max = 0\n                    if (node.P !== null) {\n                        nth = node.P.C.indexOf(node)\n                        max = node.P.C.length - 1\n                    }\n                    return { nth, max }\n                }\n                let { nth, max } = nodeIndex(node)\n                let prefix = \" \"\n                if (unicode)\n                    prefix = `${tree.left.unicode}${tree.left.unicode}${prefix}`\n                else\n                    prefix = `${tree.left.ascii}${tree.left.ascii}${prefix}`\n                if (nth < max)\n                    prefix = `${unicode ? tree.mid.unicode : tree.mid.ascii}${prefix}`\n                else\n                    prefix = `${unicode ? tree.last.unicode : tree.last.ascii}${prefix}`\n                for (let parent = node.P; parent !== null && parent !== self; parent = parent.P) {\n                    if (parent.P !== null) {\n                        let { nth, max } = nodeIndex(parent)\n                        if (nth < max)\n                            prefix = `${unicode ? tree.down.unicode : tree.down.ascii}   ${prefix}`\n                        else\n                            prefix = `    ${prefix}`\n                    }\n                }\n                out += colorize(\"tree\", prefix)\n            }\n\n            /*  draw node type  */\n            out += colorize(\"type\", node.T) + \" \"\n\n            /*  draw node attributes  */\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                out += colorize(\"parenthesis\", \"(\")\n                let first = true\n                keys.forEach((key) => {\n                    if (!first)\n                        out += colorize(\"comma\", \",\") + \" \"\n                    else\n                        first = false\n                    out += colorize(\"key\", key) + colorize(\"colon\", \":\") + \" \"\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                            out += colorize(\"value\", value.toString())\n                            break\n                        case \"string\":\n                            let hex = (ch) => ch.charCodeAt(0).toString(16).toUpperCase()\n                            out += colorize(\"value\", \"\\\"\" +\n                                value.replace(/\\\\/g, \"\\\\\\\\\")\n                                    .replace(/\"/g, \"\\\\\\\"\")\n                                    .replace(/\\x08/g, \"\\\\b\")\n                                    .replace(/\\t/g, \"\\\\t\")\n                                    .replace(/\\n/g, \"\\\\n\")\n                                    .replace(/\\f/g, \"\\\\f\")\n                                    .replace(/\\r/g, \"\\\\r\")\n                                    .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, (ch) => \"\\\\x0\" + hex(ch))\n                                    .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    (ch) => \"\\\\x\"  + hex(ch))\n                                    .replace(/[\\u0100-\\u0FFF]/g,         (ch) => \"\\\\u0\" + hex(ch))\n                                    .replace(/[\\u1000-\\uFFFF]/g,         (ch) => \"\\\\u\"  + hex(ch)) +\n                                \"\\\"\")\n                            break\n                        case \"object\":\n                            if (value instanceof RegExp)\n                                out += colorize(\"value\", \"/\" + value.source + \"/\")\n                            else\n                                out += colorize(\"value\", JSON.stringify(value))\n                            break\n                        default:\n                            out += colorize(\"value\", JSON.stringify(value))\n                            break\n                    }\n                })\n                out += colorize(\"parenthesis\", \")\") + \" \"\n            }\n\n            /*  draw node position  */\n            out += colorize(\"position\",\n                colorize(\"bracket\", \"[\") +\n                colorize(\"line\", node.L.L) +\n                colorize(\"slash\", \",\") +\n                colorize(\"column\", node.L.C) +\n                colorize(\"bracket\", \"]\"))\n\n            out += \"\\n\"\n        }, \"downward\")\n        return out\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYMerge {\n    /*  merge attributes and childs of an AST node  */\n    merge (node, takePos = false, attrMap = {}) {\n        if (node === null)\n            return this\n        if (!this.ctx.isA(node))\n            throw new Error(\"merge: invalid AST node argument\")\n        if (takePos) {\n            let pos = node.pos()\n            this.pos(pos.L, pos.C, pos.O)\n        }\n        node.attrs().forEach((attrSource) => {\n            let attrTarget = (\n                  typeof attrMap[attrSource] !== \"undefined\"\n                ? attrMap[attrSource]\n                : attrSource\n            )\n            if (attrTarget !== null)\n                this.set(attrTarget, node.get(attrSource))\n        })\n        node.childs().forEach((child) => {\n            this.add(child)\n        })\n        return this\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYSerialize {\n    /*  recursively serialize AST nodes into JSON string  */\n    static serialize (asty, node) {\n        const serializeNode = (node) => {\n            let clone = {\n                T: node.T,\n                L: { L: node.L.L, C: node.L.C, O: node.L.O }\n            }\n            let keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                clone.A = {}\n                keys.forEach((key) => {\n                    let value = node.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                        case \"string\":\n                            clone.A[key] = value\n                            break\n                        default:\n                            /*  use the slow approach only for non-atomic attributes  */\n                            clone.A[key] = JSON.parse(JSON.stringify(value))\n                            break\n                    }\n                })\n            }\n            if (node.C.length > 0)\n                clone.C = node.C.map((C) => serializeNode(C))\n            return clone\n        }\n        if (!asty.isA(node))\n            throw new Error(\"serialize: not an ASTy node\")\n        return JSON.stringify({ ASTy: serializeNode(node) })\n    }\n\n    /*  recursively unserialize JSON string into AST nodes  */\n    static unserialize (asty, json) {\n        const unserializeNode = (clone) => {\n            let node = asty.create(clone.T)\n            node.pos(clone.L.L, clone.L.C, clone.L.O)\n            if (typeof clone.A === \"object\") {\n                Object.keys(clone.A).forEach((key) => {\n                    let value = clone.A[key]\n                    switch (typeof value) {\n                        case \"boolean\":\n                        case \"number\":\n                        case \"string\":\n                            node.set(key, value)\n                            break\n                        default:\n                            /*  use the slow approach only for non-atomic attributes  */\n                            node.set(key, JSON.parse(JSON.stringify(value)))\n                            break\n                    }\n                })\n            }\n            if (typeof clone.C === \"object\" && clone.C instanceof Array)\n                node.add(clone.C.map((C) => unserializeNode(C)))\n            return node\n        }\n        let obj = JSON.parse(json)\n        if (typeof obj !== \"object\" || typeof obj.ASTy !== \"object\")\n            throw new Error(\"unserialize: not an ASTy JSON export\")\n        return unserializeNode(obj.ASTy)\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/* global 1: false */\n/* global 6: false */\n/* global 0: false */\n/* global 20180317:  false */\n\nconst version = {\n    major: 1,\n    minor: 6,\n    micro: 0,\n    date:  20180317\n}\n\nexport default version\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport default class ASTYWalk {\n    /*  walk the AST recursively  */\n    walk (cb, when = \"downward\") {\n        let _walk = (node, depth, parent) => {\n            if (when === \"downward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"downward\")\n            node.C.forEach((child) => {\n                _walk(child, depth + 1, node)\n            })\n            if (when === \"upward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"upward\")\n        }\n        _walk(this, 0, null)\n        return this\n    }\n}\n\n","/*\n**  ASTy -- Abstract Syntax Tree (AST) Data Structure\n**  Copyright (c) 2014-2018 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport ASTYBase      from \"./asty-base.js\"\nimport ASTYMerge     from \"./asty-merge.js\"\nimport ASTYWalk      from \"./asty-walk.js\"\nimport ASTYDump      from \"./asty-dump.js\"\nimport ASTYSerialize from \"./asty-serialize.js\"\nimport ASTYVersion   from \"./asty-version.js\"\n\nclass ASTYCtx {\n    constructor () {\n        this.ASTYNode = () => {}\n        let mixins = [\n            [ ASTYBase,  \"init\", \"create\", \"type\", \"pos\",\n                         \"set\", \"unset\", \"get\", \"attrs\",\n                         \"nth\", \"ins\", \"add\", \"del\",\n                         \"childs\", \"child\", \"parent\",\n                         \"serialize\" ],\n            [ ASTYMerge, \"merge\" ],\n            [ ASTYWalk,  \"walk\" ],\n            [ ASTYDump,  \"dump\" ]\n        ]\n        mixins.forEach((mixin) => {\n            let proto = mixin[0].prototype\n            mixin.slice(1).forEach((method) => {\n                this.ASTYNode.prototype[method] = proto[method]\n            })\n        })\n        return this\n    }\n    version () {\n        return ASTYVersion\n    }\n    extend (mixin) {\n        for (let method in mixin)\n            if (mixin.hasOwnProperty(method))\n                this.ASTYNode.prototype[method] = mixin[method]\n        return this\n    }\n    create (type, attrs, childs) {\n        return (new this.ASTYNode()).init(this, type, attrs, childs)\n    }\n    isA (node) {\n        return (\n               typeof node === \"object\"\n            && node instanceof this.ASTYNode\n            && typeof node.ASTy === \"boolean\"\n            && node.ASTy === true\n        )\n    }\n    serialize (node) {\n        return ASTYSerialize.serialize(this, node)\n    }\n    unserialize (json) {\n        return ASTYSerialize.unserialize(this, json)\n    }\n}\n\n/*  export the traditional way for interoperability reasons\n    (as Babel would export an object with a 'default' field)  */\nmodule.exports = ASTYCtx\n\n"]}