{"version":3,"file":"bundle.js","sources":["node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/asty-dump.js","src/asty-base.js","src/asty.js","src/asty-mixins.js"],"names":["ASTYDump","dump","out","this","walk","node","depth","i","T","keys","Object","A","length","first","forEach","key","value","replace","RegExp","toString","JSON","stringify","P","L","C","module","exports","ASTYBase","init","Error","O","merge","takePos","attrMap","self","pos","attrs","attrSource","attrTarget","set","get","childs","child","add","type","arguments","args","_add","Array","push","prototype","slice","call","arg","del","found","j","splice","cb","when","_walk","parent","require","mixins","ASTY","_mixins","apply","extend","methods","method","cls","mixin","hasOwnProperty"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYDump {\n    /*  dump the AST recursively  */\n    dump () {\n        var out = \"\"\n        this.walk(function (node, depth /*, parent, when */) {\n            for (var i = 0; i < depth; i++)\n                out += \"    \"\n            out += node.T + \" \"\n            var keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                out += \"(\"\n                var first = true\n                keys.forEach(function (key) {\n                    if (!first)\n                        out += \", \"\n                    else\n                        first = false\n                    out += key + \": \"\n                    var value = node.A[key]\n                    switch (typeof value) {\n                        case \"string\":\n                            out += \"\\\"\" + value.replace(/\\n/, \"\\\\n\").replace(/\"/, \"\\\\\\\"\") + \"\\\"\"\n                            break\n                        case \"object\":\n                            if (value instanceof RegExp)\n                                out += \"/\" +\n                                    value.toString()\n                                    .replace(/^\\//, \"\")\n                                    .replace(/\\/$/, \"\")\n                                    .replace(/\\//g, \"\\\\/\") +\n                                \"/\"\n                            else\n                                out += JSON.stringify(value)\n                            break\n                        default:\n                            out += JSON.stringify(value)\n                            break\n                    }\n                })\n                out += \") \"\n            }\n            out += \"[\" + node.P.L + \"/\" + node.P.C + \"]\\n\"\n        }, \"downward\")\n        return out\n    }\n}\n\nmodule.exports = ASTYDump\n\n","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYBase {\n    /*  constructor helper: AST node initialization  */\n    init (T) {\n        if (typeof T === \"undefined\")\n            throw new Error(\"init: invalid argument\")\n        this.T = T\n        this.A = {}\n        this.C = []\n        this.P = { L: 0, C: 0, O: 0 }\n        return this\n    }\n\n    /*  merge attributes and childs of an AST node  */\n    merge (node, takePos, attrMap) {\n        if (typeof node !== \"object\")\n            throw new Error(\"merge: invalid AST node argument\")\n        if (typeof takePos === \"undefined\")\n            takePos = false\n        if (typeof attrMap === \"undefined\")\n            attrMap = {}\n        var self = this\n        if (takePos) {\n            var pos = node.pos()\n            self.pos(pos.L, pos.C, pos.O)\n        }\n        node.attrs().forEach(function (attrSource) {\n            var attrTarget = (typeof attrMap[attrSource] !== \"undefined\" ?\n                attrMap[attrSource] : attrSource)\n            if (attrTarget !== null)\n                self.set(attrTarget, node.get(attrSource))\n        })\n        node.childs().forEach(function (child) {\n            self.add(child)\n        })\n        return this\n    }\n\n    /*  check the type of an AST node  */\n    type (T) {\n        if (arguments.length === 0)\n            return this.T\n        else if (arguments.length === 1) {\n            this.T = T\n            return this\n        }\n        else\n            throw new Error(\"type: invalid number of arguments\")\n    }\n\n    /*  set the parsing position   */\n    pos (L, C, O) {\n        if (arguments.length === 0)\n            return this.P\n        else if (arguments.length <= 3) {\n            this.P.L = L || 0\n            this.P.C = C || 0\n            this.P.O = O || 0\n            return this\n        }\n        else\n            throw new Error(\"pos: invalid number of arguments\")\n    }\n\n    /*  set AST node attributes  */\n    set () {\n        if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n            var self = this\n            var args = arguments\n            Object.keys(args[0]).forEach(function (key) { self.A[key] = args[0][key]; })\n        }\n        else if (arguments.length === 2)\n            this.A[arguments[0]] = arguments[1]\n        else\n            throw new Error(\"set: invalid arguments\")\n        return this\n    }\n\n    /*  get AST node attributes  */\n    get (key) {\n        if (arguments.length !== 1)\n            throw new Error(\"get: invalid number of arguments\")\n        if (typeof key !== \"string\")\n            throw new Error(\"get: invalid argument\")\n        return this.A[key]\n    }\n\n    /*  get names of all AST node attributes  */\n    attrs () {\n        return Object.keys(this.A)\n    }\n\n    /*  add child AST node(s)  */\n    add () {\n        if (arguments.length === 0)\n            throw new Error(\"add: missing argument(s)\")\n        var _add = function (C, node) {\n            if (!((typeof node   === \"object\") &&\n                  (typeof node.T === \"string\") &&\n                  (typeof node.P === \"object\") &&\n                  (typeof node.A === \"object\") &&\n                  (typeof node.C === \"object\" && node.C instanceof Array)))\n                throw new Error(\"add: invalid AST node: \" + JSON.stringify(node))\n            C.push(node)\n        }\n        if (arguments !== null) {\n            var self = this\n            Array.prototype.slice.call(arguments, 0).forEach(function (arg) {\n                if (typeof arg === \"object\" && arg instanceof Array)\n                    arg.forEach(function (child) { _add(self.C, child) })\n                else if (arg !== null)\n                    _add(self.C, arg)\n            })\n        }\n        return this\n    }\n\n    /*  delete child AST node(s)  */\n    del () {\n        if (arguments.length === 0)\n            throw new Error(\"del: invalid argument\")\n        var self = this\n        Array.prototype.slice.call(arguments, 0).forEach(function (arg) {\n            var found = false\n            for (var j = 0; j < self.C.length; j++) {\n                if (self.C[j] === arg) {\n                    self.C.splice(j, 1)\n                    found = true\n                    break\n                }\n            }\n            if (!found)\n                throw new Error(\"del: child not found\")\n        })\n        return this\n    }\n\n    /*  get child AST nodes  */\n    childs () {\n        return this.C\n    }\n\n    /*  walk the AST recursively  */\n    walk (cb, when) {\n        if (typeof when === \"undefined\")\n            when = \"downward\"\n        var _walk = function (node, depth, parent) {\n            if (when === \"downward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"downward\")\n            node.C.forEach(function (child) { _walk(child, depth + 1, node) })\n            if (when === \"upward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"upward\")\n        }\n        _walk(this, 0, null)\n        return this\n    }\n}\n\nmodule.exports = ASTYBase\n\n","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar ASTYBase = require(\"./asty-base.js\");\nvar ASTYDump = require(\"./asty-dump.js\");\nvar mixins   = require(\"./asty-mixins.js\");\n\n/*  the base class  */\nvar ASTY = class ASTY extends mixins(ASTYBase, ASTYDump) {\n    /*  the constructor mainly passes control to the init function  */\n    constructor () {\n        if (!(this instanceof ASTY)) {\n            var self = new ASTY(\"\")\n            return self.init.apply(self, arguments);\n        }\n        else\n            return this.init.apply(this, arguments);\n    }\n}\n\n/*  static function for extending the class  */\nASTY.extend = (methods) => {\n    for (var method in methods)\n        ASTY.prototype[method] = methods[method]\n}\n\nmodule.exports = ASTY\n\n","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/*  little helper function for ES6 style mixin support  */\nmodule.exports = function mixins () {\n    var cls = function () {};\n    for (var i = 0; i < arguments.length; i++) {\n        var mixin = arguments[i];\n        if (typeof mixin === \"function\")\n            mixin = mixin.prototype;\n        for (var key in mixin)\n            if (Object.prototype.hasOwnProperty.call(mixin, key))\n                cls.prototype[key] = mixin[key];\n    }\n    return cls;\n};\n\n"]}