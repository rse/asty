{"version":3,"file":"bundle.js","sources":["node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/asty-base.js","src/asty-dump.js","src/asty.js","src/asty-mixins.js"],"names":["ASTYBase","init","T","Error","this","ASTy","L","C","O","A","P","merge","node","takePos","attrMap","self","pos","attrs","forEach","attrSource","attrTarget","set","get","childs","child","add","type","arguments","length","args","Object","keys","key","_add","Array","JSON","stringify","push","prototype","slice","call","arg","del","found","j","splice","parent","walk","cb","when","_walk","depth","module","exports","ASTYDump","dump","out","i","first","value","replace","RegExp","toString","require","mixins","ASTY","_mixins","apply","extend","methods","method","cls","mixin","hasOwnProperty"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYBase {\n    /*  constructor helper: AST node initialization  */\n    init (T) {\n        if (typeof T === \"undefined\")\n            throw new Error(\"init: invalid argument\")\n        this.ASTy = true\n        this.T = T\n        this.L = { L: 0, C: 0, O: 0 }\n        this.A = {}\n        this.C = []\n        this.P = null\n        return this\n    }\n\n    /*  merge attributes and childs of an AST node  */\n    merge (node, takePos, attrMap) {\n        if (typeof node !== \"object\")\n            throw new Error(\"merge: invalid AST node argument\")\n        if (typeof takePos === \"undefined\")\n            takePos = false\n        if (typeof attrMap === \"undefined\")\n            attrMap = {}\n        var self = this\n        if (takePos) {\n            var pos = node.pos()\n            self.pos(pos.L, pos.C, pos.O)\n        }\n        node.attrs().forEach(function (attrSource) {\n            var attrTarget = (typeof attrMap[attrSource] !== \"undefined\" ?\n                attrMap[attrSource] : attrSource)\n            if (attrTarget !== null)\n                self.set(attrTarget, node.get(attrSource))\n        })\n        node.childs().forEach(function (child) {\n            self.add(child)\n        })\n        return this\n    }\n\n    /*  check the type of an AST node  */\n    type (T) {\n        if (arguments.length === 0)\n            return this.T\n        else if (arguments.length === 1) {\n            this.T = T\n            return this\n        }\n        else\n            throw new Error(\"type: invalid number of arguments\")\n    }\n\n    /*  set the parsing position   */\n    pos (L, C, O) {\n        if (arguments.length === 0)\n            return this.L\n        else if (arguments.length <= 3) {\n            this.L.L = L || 0\n            this.L.C = C || 0\n            this.L.O = O || 0\n            return this\n        }\n        else\n            throw new Error(\"pos: invalid number of arguments\")\n    }\n\n    /*  set AST node attributes  */\n    set () {\n        if (arguments.length === 1 && typeof arguments[0] === \"object\") {\n            var self = this\n            var args = arguments\n            Object.keys(args[0]).forEach(function (key) { self.A[key] = args[0][key]; })\n        }\n        else if (arguments.length === 2)\n            this.A[arguments[0]] = arguments[1]\n        else\n            throw new Error(\"set: invalid arguments\")\n        return this\n    }\n\n    /*  get AST node attributes  */\n    get (key) {\n        if (arguments.length !== 1)\n            throw new Error(\"get: invalid number of arguments\")\n        if (typeof key !== \"string\")\n            throw new Error(\"get: invalid argument\")\n        return this.A[key]\n    }\n\n    /*  get names of all AST node attributes  */\n    attrs () {\n        return Object.keys(this.A)\n    }\n\n    /*  add child AST node(s)  */\n    add () {\n        if (arguments.length === 0)\n            throw new Error(\"add: missing argument(s)\")\n        var _add = function (node, child) {\n            if (!((typeof child   === \"object\") &&\n                  (typeof child.T === \"string\") &&\n                  (typeof child.L === \"object\") &&\n                  (typeof child.A === \"object\") &&\n                  (typeof child.P === \"object\") &&\n                  (typeof child.C === \"object\" && child.C instanceof Array)))\n                throw new Error(\"add: invalid AST node: \" + JSON.stringify(child))\n            node.C.push(child)\n            child.P = node\n        }\n        if (arguments !== null) {\n            var self = this\n            Array.prototype.slice.call(arguments, 0).forEach(function (arg) {\n                if (typeof arg === \"object\" && arg instanceof Array)\n                    arg.forEach(function (child) { _add(self, child) })\n                else if (arg !== null)\n                    _add(self, arg)\n            })\n        }\n        return this\n    }\n\n    /*  delete child AST node(s)  */\n    del () {\n        if (arguments.length === 0)\n            throw new Error(\"del: invalid argument\")\n        var self = this\n        Array.prototype.slice.call(arguments, 0).forEach(function (arg) {\n            var found = false\n            for (var j = 0; j < self.C.length; j++) {\n                if (self.C[j] === arg) {\n                    self.C.splice(j, 1)\n                    arg.P = null\n                    found = true\n                    break\n                }\n            }\n            if (!found)\n                throw new Error(\"del: child not found\")\n        })\n        return this\n    }\n\n    /*  get child AST nodes  */\n    childs () {\n        return this.C\n    }\n\n    /*  get parent AST node  */\n    parent () {\n        return this.P\n    }\n\n    /*  walk the AST recursively  */\n    walk (cb, when) {\n        if (typeof when === \"undefined\")\n            when = \"downward\"\n        var _walk = function (node, depth, parent) {\n            if (when === \"downward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"downward\")\n            node.C.forEach(function (child) { _walk(child, depth + 1, node) })\n            if (when === \"upward\" || when === \"both\")\n                cb.call(null, node, depth, parent, \"upward\")\n        }\n        _walk(this, 0, null)\n        return this\n    }\n}\n\nmodule.exports = ASTYBase\n\n","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nclass ASTYDump {\n    /*  dump the AST recursively  */\n    dump () {\n        var out = \"\"\n        this.walk(function (node, depth /*, parent, when */) {\n            for (var i = 0; i < depth; i++)\n                out += \"    \"\n            out += node.T + \" \"\n            var keys = Object.keys(node.A)\n            if (keys.length > 0) {\n                out += \"(\"\n                var first = true\n                keys.forEach(function (key) {\n                    if (!first)\n                        out += \", \"\n                    else\n                        first = false\n                    out += key + \": \"\n                    var value = node.A[key]\n                    switch (typeof value) {\n                        case \"string\":\n                            out += \"\\\"\" + value.replace(/\\n/, \"\\\\n\").replace(/\"/, \"\\\\\\\"\") + \"\\\"\"\n                            break\n                        case \"object\":\n                            if (value instanceof RegExp)\n                                out += \"/\" +\n                                    value.toString()\n                                    .replace(/^\\//, \"\")\n                                    .replace(/\\/$/, \"\")\n                                    .replace(/\\//g, \"\\\\/\") +\n                                \"/\"\n                            else\n                                out += JSON.stringify(value)\n                            break\n                        default:\n                            out += JSON.stringify(value)\n                            break\n                    }\n                })\n                out += \") \"\n            }\n            out += \"[\" + node.P.L + \"/\" + node.P.C + \"]\\n\"\n        }, \"downward\")\n        return out\n    }\n}\n\nmodule.exports = ASTYDump\n\n","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar ASTYBase = require(\"./asty-base.js\");\nvar ASTYDump = require(\"./asty-dump.js\");\nvar mixins   = require(\"./asty-mixins.js\");\n\n/*  the base class  */\nvar ASTY = class ASTY extends mixins(ASTYBase, ASTYDump) {\n    /*  the constructor mainly passes control to the init function  */\n    constructor () {\n        if (!(this instanceof ASTY)) {\n            var self = new ASTY(\"\")\n            return self.init.apply(self, arguments);\n        }\n        else\n            return this.init.apply(this, arguments);\n    }\n}\n\n/*  static function for extending the class  */\nASTY.extend = (methods) => {\n    for (var method in methods)\n        ASTY.prototype[method] = methods[method]\n}\n\nmodule.exports = ASTY\n\n","/*\n**  ASTy -- Generic Abstract Syntax Tree (AST)\n**  Copyright (c) 2014-2015 Ralf S. Engelschall <rse@engelschall.com>\n**\n**  Permission is hereby granted, free of charge, to any person obtaining\n**  a copy of this software and associated documentation files (the\n**  \"Software\"), to deal in the Software without restriction, including\n**  without limitation the rights to use, copy, modify, merge, publish,\n**  distribute, sublicense, and/or sell copies of the Software, and to\n**  permit persons to whom the Software is furnished to do so, subject to\n**  the following conditions:\n**\n**  The above copyright notice and this permission notice shall be included\n**  in all copies or substantial portions of the Software.\n**\n**  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n**  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n**  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n**  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n**  CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n**  TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n**  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n/*  little helper function for ES6 style mixin support  */\nmodule.exports = function mixins () {\n    var cls = function () {};\n    for (var i = 0; i < arguments.length; i++) {\n        var mixin = arguments[i];\n        if (typeof mixin === \"function\")\n            mixin = mixin.prototype;\n        for (var key in mixin)\n            if (Object.prototype.hasOwnProperty.call(mixin, key))\n                cls.prototype[key] = mixin[key];\n    }\n    return cls;\n};\n\n"]}